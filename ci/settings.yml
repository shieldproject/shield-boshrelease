---
meta:
  name:    shield
  release: S.H.I.E.L.D.
  target:  sw
  url:     https://ci.starkandwayne.com

  initial_version: 5.1.0

  bosh-lite:
    target: https://10.58.111.44:25555
    deployment: shield-warden

  bosh-lite-cloud-config:
    target: https://10.58.111.49:25555
    deployment: shield-testflight-links
    username: (( vault "secret/bosh-lites/lite49/users/admin:username" ))
    password: (( vault "secret/bosh-lites/lite49/users/admin:password" ))
    cacert:   (( vault "secret/bosh-lites/lite49/certs:rootCA.pem" ))

  aws:
    access_key: (( vault "secret/aws/cfcommunity:access" ))
    secret_key: (( vault "secret/aws/cfcommunity:secret" ))

  github:
    owner:  starkandwayne
    repo:   shield-boshrelease
    branch: master
    branch-6x: 6.x
    private_key:  (( vault "secret/pipelines/shield-boshrelease/github:private" ))
    access_token: (( vault "secret/pipelines/shield-boshrelease/github:token" ))

  slack:
    webhook: (( vault "secret/pipelines/shield-boshrelease/slack:webhook" ))
    channel: '#shield'
    blob_success:  '(( concat "$BUILD_PIPELINE_NAME: New version of $BUILD_JOB_NAME was detected, and updated in master. <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME| Cut a new release?>" ))'
    blob_failure:  '(( concat "$BUILD_PIPELINE_NAME: :airplane_arriving: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to update the blob for $BUILD_JOB_NAME>" ))'


groups:
- name: 6.x
  jobs:
  - testflight-6.x
  - rc-6.x
  - minor-6.x
  - shipit-6.x
- name: blobs
  jobs:
  - shield

jobs:
- name: shield
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: shield, trigger: true, params: { include_source_tarball: true }}
  - task: update-shield
    config:
      rootfs_uri: docker:///starkandwayne/concourse
      platform: linux
      inputs:
      - name: git
      - name: shield
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        RELEASE_DIR: shield
        BLOB:        shield
        BLOB_BINARY: shield-server-linux-amd64.tar.gz
        BLOB_URL:    https://github.com/starkandwayne/shield
        BLOB_DESTINATION: shield/shield-server-linux-amd64.tar.gz
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

- name: testflight
  serial_groups: [bosh]

- name: testflight-6.x
  public: true
  serial: true
  serial_groups: [bosh]
  plan:
  - do:
    - aggregate:
      - { get: git-6.x, trigger: true }
    - task: testflight
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image ))
        inputs:
          - { name: git-6.x, path: git }
        run:
          path: ./git/ci/scripts/testflight
          args: []
        params:
          REPO_ROOT:            git
          BOSH_LITE_TARGET:     (( grab meta.bosh-lite.target ))
          BOSH_LITE_USERNAME:   (( grab meta.bosh-lite.username ))
          BOSH_LITE_PASSWORD:   (( grab meta.bosh-lite.password ))
          BOSH_LITE_DEPLOYMENT: (( grab meta.bosh-lite.deployment ))
          TEST_ERRAND:          (( grab meta.test-errand || ~ ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.fail_url " " meta.pipeline ": [6.x] test job failed" ))'

- name: rc-6.x
  public: true
  plan:
  - do:
    - aggregate:
        - { get: git-6.x,     trigger: true,  passed: [testflight-6.x] }
        - { get: version-6.x, trigger: true, params: {pre: rc} }
    - put: version-6.x
      params: {file: version-6.x/number}
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.fail_url " " meta.pipeline ": [6.x] rc job failed" ))'

- name: minor-6.x
  public: true
  plan:
  - do:
    - { get: version-6.x, trigger: false, params: {bump: minor} }
    - { put: version-6.x,                 params: {file: version-6.x/number} }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.fail_url " " meta.pipeline ": [6.x] minor job failed" ))'

- name: shipit-6.x
  public: true
  serial: true
  plan:
  - do:
    - name: inputs
      aggregate:
        - { get: version-6.x, passed: [rc-6.x], params: {bump: final} }
        - { get: git-6.x,     passed: [rc-6.x] }
    - name: release
      task: release
      config:
        rootfs_uri: docker:///starkandwayne/concourse
        platform: linux
        inputs:
          - { name: version-6.x, path: version }
          - { name: git-6.x,     path: git }
        outputs:
          - name: gh
          - name: pushme
        run:
          path: ./git/ci/scripts/shipit
          args: []
        params:
          REPO_ROOT:    git
          VERSION_FROM: version/number
          RELEASE_NAME: (( concat meta.release " BOSH Release" ))
          RELEASE_ROOT: gh
          REPO_OUT:     pushme
          BRANCH:       (( grab meta.github.branch-6x ))

          BOSH_LITE_TARGET:     (( grab meta.bosh-lite.target ))
          BOSH_LITE_USERNAME:   (( grab meta.bosh-lite.username ))
          BOSH_LITE_PASSWORD:   (( grab meta.bosh-lite.password ))
          BOSH_LITE_DEPLOYMENT: (( grab meta.bosh-lite.deployment ))

          AWS_ACCESS_KEY:       (( grab meta.aws.access_key ))
          AWS_SECRET_KEY:       (( grab meta.aws.secret_key ))

    - name: upload-git
      put: git-6.x
      params:
        rebase: true
        repository: pushme/git
    - name: tarball
      put: s3
      params:
        file:  (( concat "gh/artifacts/" meta.name "-*.tgz" ))
    - name: github-release
      put: github
      params:
        name:   gh/name
        tag:    gh/tag
        body:   gh/notes.md
        globs: [gh/artifacts/*]
    - name: version-bump
      put: version-6.x
      params:
        bump: patch
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.fail_url " " meta.pipeline ": [6.x] shipit job failed" ))'

resources:
- name: shield
  type: github-release
  source:
    user: starkandwayne
    repository: shield
    access_token: (( grab meta.github.access_token ))

- name: git-6.x
  type: git
  source:
    uri:         (( grab meta.github.uri ))
    branch:      (( grab meta.github.branch-6x ))
    private_key: (( grab meta.github.private_key ))

- name: version-6.x
  type: semver
  source :
    driver:            s3
    bucket:            (( grab meta.aws.bucket ))
    key:               version-6.x
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    initial_version:   6.8.0
