#!/bin/bash
#
# ci/scripts/testflight
#
# Script for testing a BOSH release
#
# author:  James Hunt <james@niftylogic.com>

set -eu
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

header() {
  echo
  echo "###############################################"
  echo
  echo $*
  echo
}

######
######
######
header "Checking the Concourse Pipeline Environment"
envok=0
checkenv() {
  local name=$1
  local val=$2

  if [[ -z "$val" ]]; then
    echo >&2 "The $name variable must be set."
    envok=1
  fi
}
checkenv BOSH_ENVIRONMENT   "${BOSH_ENVIRONMENT:-}"
checkenv BOSH_CA_CERT       "${BOSH_CA_CERT:-}"
checkenv BOSH_CLIENT        "${BOSH_CLIENT:-}"
checkenv BOSH_CLIENT_SECRET "${BOSH_CLIENT_SECRET:-}"
checkenv BOSH_DEPLOYMENT    "${BOSH_DEPLOYMENT:-}"
checkenv MANIFEST_PATH      "${MANIFEST_PATH:-}"
checkenv AWS_ACCESS_KEY     "${AWS_ACCESS_KEY:-}"
checkenv AWS_SECRET_KEY     "${AWS_SECRET_KEY:-}"
checkenv REPO_ROOT          "${REPO_ROOT:-}"
if [[ $envok != 0 ]]; then
  echo >&2 "Is your Concourse Pipeline misconfigured?"
  exit 1
fi

cd $REPO_ROOT
if [[ ! -f ${MANIFEST_PATH} ]]; then
  echo "Deployment manifest ${MANIFEST_PATH} does not exist"
  exit 1
fi

######
######
######
header "Cleaning up any previous '${BOSH_DEPLOYMENT}' deployments..."
bosh -n delete-deployment --force || true

######
######
######
header "Creating candidate BOSH release..."
bosh -n reset-release # in case dev_releases/ is in repo accidentally
cat > config/private.yml <<YAML
---
blobstore:
  provider: s3
  options:
    access_key_id: ${AWS_ACCESS_KEY}
    secret_access_key: ${AWS_SECRET_KEY}
YAML
bosh create-release
bosh upload-release --rebase

######
######
######
header "Choosing cloud-config options"
vm_type=$(  bosh int <(bosh cloud-config) --path /vm_types/0/name)
disk_type=$(bosh int <(bosh cloud-config) --path /disk_types/0/name)
network=$(  bosh int <(bosh cloud-config) --path /networks/0/name)

release_name=$(bosh int config/final.yml --path /final_name)
release_version=$(spruce json dev_releases/*/index.yml | jq -r ".builds[].version" | sed -e "s%+.*%%")

######
######
######
header "Generating ops-file overrides"
(cat <<EOF
---
- type: replace
  path: /name
  value: ${BOSH_DEPLOYMENT}

- type: replace
  path: /releases/name=${release_name}
  value:
    name: ${release_name}
    version: ${release_version}.latest
EOF

for ig in $(spruce json ${MANIFEST_PATH} | jq -r ".instance_groups[].name"); do
  cat <<EOF
- type: replace
  path: /instance_groups/name=${ig}/vm_type
  value: ${vm_type}

- type: replace
  path: /instance_groups/name=${ig}/networks
  value: [{name: ${network}}]

EOF
done

for ig in $(spruce json $MANIFEST_PATH | jq -r ".instance_groups[] | select(.persistent_disk_type).name"); do
  cat <<EOF
- type: replace
  path: /instance_groups/name=${ig}/persistent_disk_type
  value: ${disk_type}

EOF
done) > overrides.yml

######
######
######
header "Deploying to ${BOSH_ENVIRONMENT}..."
bosh -n deploy $MANIFEST_PATH -o overrides.yml

######
######
######
if [[ -n ${TEST_ERRAND:-} ]]; then
  header "Running '${TEST_ERRAND}' errand"
  bosh -n run-errand ${TEST_ERRAND}
fi

######
######
######
header "Cleaning up testflight '${BOSH_DEPLOYMENT}' deployment..."
bosh -n delete-deployment --force

echo
echo
echo
echo "SUCCESS"
exit 0
