#!/bin/bash
<% require 'json' %>
export PATH=${PATH}:/var/vcap/packages/shield/bin
export PATH=${PATH}:/var/vcap/packages/utils/bin
SHIELD_CONFIG=$(mktemp --tmpdir auto.XXXXXX)
trap "rm -rf ${SHIELD_CONFIG}" INT TERM QUIT EXIT

<% if_p("shield.agent.autoprovision") do |server| %>
# The SHIELD_API_TOKEN is set here so that the post-start script will fail
# to render when provisioning_key is not specified, but the script is about
# to try to create targets or jobs
export SHIELD_API_TOKEN=<%= p("shield.provisioning_key") %>
<% if p("shield.skip_ssl_verify") %>export SHIELD_SKIP_SSL_VERIFY=true<% end %>

# Create a specific  config file for shield-agent stuff, to avoid race
# conditions in case we are colocated with shield-daemon. %>
shield -c ${SHIELD_CONFIG} create backend default <%= server %>

<%
   my_ip = nil
   if_p('shield.agent.ip') do |ip|
     my_ip = ip
   end
   if my_ip.nil?
     my_ip = spec.networks.send(spec.networks.methods(false).first).ip
   end
%>
provision() {
	local name=$1; shift
	uuid=$(shield -c ${SHIELD_CONFIG} --raw show $* $name | jq -r '.uuid // empty')
	if [[ -z ${uuid} ]]; then
		echo "Creating a new $* named '$name'"
		tee >(shield -c ${SHIELD_CONFIG} --raw create $*)
	else
		echo "Editing existing $* named '$name'"
		tee >(shield -c ${SHIELD_CONFIG} --raw edit $*)
	fi
}
job() {
  local name=$1
  local targ=$(shield -c ${SHIELD_CONFIG} --raw show target   $2 | jq -r '.uuid // empty')
  local stor=$(shield -c ${SHIELD_CONFIG} --raw show store    $3 | jq -r '.uuid // empty')
  local retn=$(shield -c ${SHIELD_CONFIG} --raw show policy   $4 | jq -r '.uuid // empty')
  local sche=$(shield -c ${SHIELD_CONFIG} --raw show schedule $5 | jq -r '.uuid // empty')

  cat <<EOF | provision $name job
{"name":      "${name}",
 "target":    "${targ}",
 "store":     "${stor}",
 "retention": "${retn}",
 "schedule":  "${sche}",
 "paused":    false}
EOF
}
<% p('shield.schedules', {}).each do |name, schedule| %>
cat <<EOF | provision '<%= name %>' schedule
{"name":"<%= name %>",
 "when":"<%= schedule %>"}
EOF
<% end %>

<% p('shield.retention-policies', {}).each do |name, retention| %>
cat <<EOF | provision '<%= name %>' policy
{"name":"<%= name %>",
 "expires":<%= retention.to_i * 86400 %>}
EOF
<% end %>

<% p('shield.targets', {}).each do |name, target| %>
cat <<EOF | provision '<%= target["name"] || name %>' target
{"name":     "<%= target["name"] || name %>",
 "plugin":   "<%= target["plugin"] %>",
 "endpoint": <%= target["config"].to_json.dump %>,
 "agent":    "<%= my_ip %>:<%= p("shield.agent.port") %>"}
EOF
<% end %>

<% p('shield.stores', {}).each do |name, store| %>
cat <<EOF | provision '<%= store["name"] || name %>' store
{"name":     "<%= store["name"] || name %>",
 "plugin":   "<%= store["plugin"] %>",
 "endpoint": <%= store["config"].to_json.dump %>}
EOF
<% end %>

<% p('shield.jobs', {}).each do |name, job| %>
job '<%= job["name"] || name %>' \
    '<%= job["target"] %>'    \
    '<%= job["store"] %>'     \
    '<%= job["retention"] %>' \
    '<%= job["schedule"] %>'
<% end %>

sleep 5
echo "all done"
<% end %>
