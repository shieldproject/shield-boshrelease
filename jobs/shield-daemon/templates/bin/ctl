#!/bin/bash

<%
  if p('database.host', nil)
    username, password, host, port, dbname = p('database.username'), p('database.password'), p('database.host'), p('database.port'), p('database.db')
    scheme = p('database.type', 'postgres')
  else
    l = link('shield-db')
    scheme = l.p('db_scheme')
    port =   l.p('port')
    host =   l.instances.first.address
    dbname = l.p('databases').select {|database| database['tag'] == 'shield'}.first['name']
    role =   l.p('roles').first
    username, password = role['name'], role['password']
  end
  if scheme == "mysql"
    shielddb_uri = "#{username}:#{password}@tcp(#{host}:#{port})/#{dbname}?sql_mode=POSTGRESQL&default_storage_engine=INNODB"
  else
    shielddb_uri = "#{scheme}://#{username}:#{password}@#{host}:#{port}/#{dbname}?sslmode=disable"
  end
  shielddb_scheme = scheme
%>

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/shield-daemon/helpers/ctl_setup.sh 'shield-daemon'

case $1 in

  start)
    pid_guard $PIDFILE $JOB_NAME
    echo "Startup requested for $JOB_NAME"

    chown vcap:vcap /var/vcap/jobs/shield-daemon/shared/id_rsa
    # store pid in $PIDFILE
    echo $$ > $PIDFILE

    # run migrations

    echo "Ensuring DB schema is up to date"
    shield-schema -t "<%= shielddb_scheme %>" \
         -d "<%= shielddb_uri %>"

    echo "Starting $JOB_NAME"
    export SHIELD_NAME="<%= p("name") %>"
    exec chpst -u vcap:vcap shieldd -c /var/vcap/jobs/shield-daemon/config/shieldd.conf --log-level <%= p("shield.log_level") %> \
         >>$LOG_DIR/$JOB_NAME.log 2>&1
    ;;

  stop)
    echo "Shutdown requested for $JOB_NAME"
    kill_and_wait $PIDFILE

    ;;
  *)
    echo "Usage: shield-daemon_ctl {start|stop}"

    ;;

esac
exit 0
